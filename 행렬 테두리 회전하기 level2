def solution(rows, columns, queries):
    #주어진 rows, columns 값을 통해서 matrix생성하기
    matrix = [[(i)*columns + (j+1) for j in range(columns)] for i in range(rows)]
    answer = []
    #회전시키기
    for x1, y1, x2, y2 in queries:
        #주어진 좌표에서 1을 빼야 배열의 실제 위치에 접근할 수 있음
        answer.append(rotate(x1-1, y1-1, x2-1, y2-1, matrix))
        
    return answer

#시계 방향으로 회전시키는 함수
def rotate(x1, y1, x2, y2, matrix) : 
    #구간을 정해서 값을 저장하기
    first = matrix[x1][y1]
    min_value = first
    
    #왼쪽 - x를 기준으로 x+1값이 x값으로 올라오는 구간
    for k in range(x1, x2): 
        matrix[k][y1] = matrix[k+1][y1]
        min_value = min(min_value, matrix[k+1][y1])

    #아래 - y를 기준으로 y+1값이 y값으로 왼쪽으로 이동하는 구간
    for k in range(y1, y2):
        matrix[x2][k] = matrix[x2][k+1]
        min_value = min(min_value, matrix[x2][k+1])
    
    #오른쪽 - x를 기준으로 x값이 x+1값으로 내려가는 구간
    for k in range(x2, x1, -1):
        matrix[k][y2] = matrix[k-1][y2]
        min_value = min(min_value, matrix[k-1][y2])
    
    #위 - y를 기준으로 y값이 y+1값으로 이동하는 구간
    for k in range(y2, y1+1, -1):
        matrix[x1][k] = matrix[x1][k-1]
        min_value=min(min_value, matrix[x1][k-1])
    
    matrix[x1][y1+1] = first
    return min_value
    
